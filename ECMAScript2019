let name = 'Joe';
name= "Bob";

const person = {name: 'Joe', age: 25};

person.name = 'Bob';

console.log(person)

if (true) {
    let a = 1;
}

for (let i=0;i<3;i++){
    setTimeout(function (){
        console.log(i)
    }, i*100);
}

function square(x){
    return x*x;
}


const sq = (x,y) => x*y;
console.log(sq(2, 3))

// найдем макимальное не четное число
const arr = ['1', '2', '3', '4'];
const res = arr
    .map((el)=>parseInt(el)) // фунция map преобразует массив,  ParseInt преобразует массив в числа
    .filter((num)=>num%2)// пробижится по элементам массива, останутся те элементы,  функция которых вернет true
    .reduce((max, value)=> (max, value), 0); // функция reduce пройдет по оставшиммся значениям, выполнит передаваемую функцию сохраняя результат

console.log(res);



const greeter = {
    greet: function (name){
        console.log('Hello', name);
    },
    greetAll: function(names){
        names.forEach((name)=>{this.greet(name);
        });
    }
};

greeter.greetAll(['Bob', 'Mark', 'Pete']);


//  Параметры по умолчанию
// (Default Parameters)

function  fetchOrders(count = 10, start = 0){
    console.log('Getting', count,
        'orders starting from', start);
}
fetchOrders(15,)

function findProducts(opts = {minPrice:10, maxPrice:20}){
    console.log(opts);
 }
 findProducts(); // по умолчанию передается указанное значение
 findProducts({});// если перадаем значение, то передается объект который передаем

//Rest parametr
// Собирает несколько независимых параметров в массив, Rest параметр последний в списке, может быть один в функции
function max (a,b,...numbers) {
    console.log(numbers);
}

max(1,2,3); // 3 ка единственный элеммент массива


//Spread operator
// Раскладывает массив на список незавимых параметров
const arr1 = [1, 2, 3];
const arr2 = [4, 7 ,1]

const res = Math.max(41, ... arr1, 5,  ...arr2, 10);
console.log(res);

//shallowcopy, поверхностная копия,  создаем новый массив, но все элементы остаются как и в предыдущем массиве
const shallowcopy = [...arr1, ...arr2, 41];
console.log(shallowcopy);

//Destructuring - Деструктуризация позволяет лаконично достать элемент из структуры данных, масиива или объекта

const person = {
   firstName: 'Peter',
   lastName: 'Smith',
   age: 27
}
const firstName = person.firstName;
const lastName= person.lastName;

const{firstName, lastName} = person;
console.log(firstName, lastName)

// если объекты во вложении

const person ={
    name:{
        first: 'Peter',
        last: 'Smith'
    }
}
const { name: {first: firstName, last: lastName}} = person; //поле first, которое достаем из объекта можно переименовать в константу firstName
console.log(firstName,lastName);

//если объекта нет
//const {permissions: {role = 'user'}} = person; // этод код выдаст ошибку, т.к.permissions не существует
//console.log(role);
// для того, что бы это обойти, если permissions надо сделать объектом по умолчанию = {}
const {permissions: {role = 'user'} = {}} = person; // этод код выдаст ошибку, т.к.permissions не существует
console.log(role);

//Деструктуризация аргументов функции, подключения в=к сетевому сервису
// можем выборочно указывать необходимое значение нужного параметра, и менятся будет только он, например port

function connect({
                     host = 'localhost',
                     port =12345,
                     user = 'guest'
                 }){
    console.log('user:', user, 'port:', port, 'host:', host);
}
connect({port:1111});

//функция без параметров не вызыввается, но можно присвоить значение по умолчанию ={}
function connect({
                     host = 'localhost',
                     port =12345,
                     user = 'guest'
                 }= {}){
    console.log('user:', user, 'port:', port, 'host:', host);
}
connect();

//Array Destructing Деструкторизация с массивами
const fib = [1, 1, 2, 3, 5, 8, 13];
const [a,b,c] = fib;
console.log(a,b,c);

// Выводим 2 е и 4 е значение
const fib = [1, 1, 2, 3, 5, 8, 13];
const [ , a, , b ] = fib;
console.log(a, b);



const line = [[10,17],[14,7]];
const[[p1x, p1y], [p2x, p2y]]= line; // присваиваем массив
console.log(p1x, p1y, p2x, p2y)


const people = ['chris', 'sandra'];
const [d, e, k  = 'guest' ] = people; // 2 значения из массива, 3 е 'quest' по умолчанию
console.log(d,e,k);


const people = ['chris', 'sandra', 'bob'];
const [e, ...others] = people;
console.log(... others);


const  dict = {
    duck: 'quack',
    dog: 'wuff',
    mouse: 'squeak',
    hamster: 'squeak'
};
const res = Object.entries(dict) // получаем массив key, value
    .filter(([ ,value])=>value=='squeak') // выводим элементы массива, где второе значение 'squeak'
    .map(([key])=>key);// выводим ключ

console.log(res);


// Объект, внутри которого есть массив, хотим получить координаты точек
const shape = {
    type: 'segment',
    coordinates:{
        start:[10,15],
        end:[17,15]
    }
}

const{coordinates: {start: [startX, startY], end:[endX,endY]}} = shape;// coordinates -объект, втнутри 2 массива start и end: startX, startY, endX, endY константы в которые мы сохраняем элементы массива
console.log(startX, startY, endX, endY);


//Temlate Literals, шаблонные строки
const user = 'Bob';
const num = 17;
const txt = 'Hello, '+ user + ' you have ' + num + ' letters in your inbox';
const txt2 =`Hello ${user} you ${num} letters in your inbox`; //txt2 более компактный код, использовать обратные кавычки`````
const txt3 =`Now is ${Date.now()}`;// можно поставить результат вызова функции

console.log(txt2);


// Многострочный код, строка состоящая из набора подстрок

const html =
    '<ul>' +
    '<li>Item One</li>>'+
    '<li>Item Two</li>>'+
    '</ul>';

const temlateHtml = `  //обратные кавычки, бэктик
    <ul>
    <li>Item One </li>
    <li>Item Two</li>
    </ul>
    `

console.log(temlateHtml)

//Можем добавить js код в наше выражение используя ${}

const items =['tea', 'cofee']

const temlateHtml = `
    <ul>
    <li>${items[0]}</li>
    <li>${items[1]}</li>
    </ul>
    `

console.log(temlateHtml)

// Objects, создание объектов

const x = 10;
const y = 30;

const p={
    x,
    y
    draw(ctx){    // параметры функции 
        // тело функции
    }
};


// данная конструкция редко используется
const prefix = '_blah_';

const data = {
    [prefix+ 'name']: 'Bob',
    [prefix+'age']:23
};

console.log(data);

//Функция позволяет копировать свойства из одного объекта в другой
//Есть два объекта, один хранит опции по умолчанию, второй хранит опции от пользователя, мы хотим их объединить, то что пердал пользователь имеет более выскоий приоритет

const defaults = {
    host:'localhost',
    dbName:'blog',
    user:'admin'
};

const opts = {
    user: 'john',
    password: 'utopia'
};
// что бы не перезатирать default, добавим пустой объект{}  и в него сначала скопируем defaults, затем opts
const res = Object.assign( {}, defaults, opts); //запишет defaults, поверх них запишет opts, заменит user, добавит password {} - куда записываем, defaults, opts - что записываем слева направо
console.log(res);

//создаем shallowCopy
const person = {
    name:'Bob',
    friends:['Mark','Jacob']
};
const shallowCopy = Object.assign({}, person);// при помощи Object.assign мы хотим добавить все свойства из объекта person
person.friends.push('Jane'); // если в масссиве person добавить имя Jane, то оно появится и в масииве shallowCopy
console.log (shallowCopy);


// Spread operator for Objects

const  defaults = {
    host: 'localhost',
    dbName: 'blog',
    user: 'admin'
};

const opts = {
    user: 'john',
    password:'utopia'
};

const res = {...defaults, ...opts};
console.log(res)
